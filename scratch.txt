Things to add

- level bg music
- powerup jingle
- Spin jump
- High jump boots
- bombs
- long beam powerup
- ice beam powerup
- wave beam powerup
- vertical rooms / shaft 1
- missiles
- enemy: big flappy

Bugs

- non-stereo sound?
- Recoil from geting damaged -> samus keeps going, in suit or ball form, until interupted.
- key-up-related events are missed when flip-flopping in and out of adeventure state to powerup state and back, causing sticky run/roll action


Refinements

- gun recoil anim
- Powerup icons should flicker/glow 
- morphing action should have intermediate "roll up" frame
- walking off a ledge: samus shouldn't be able to aim or fire up while falling. (Distinct from falling due to jump)


-----------------------------------


@displayObjectCaches
  constructor
  objectCacheFor
    (many systems)

@currentMapName
  constructor
  setMap
  hideMaps
    setMap
    MapSyncSystem
    

@drawHitBoxes
  HitBoxVisualSyncSystem

@stage, @zoomScale, @aspectScale
  constructor
  _createLayers

@layers
  constructor
  addObjectToLayer
  getLayer
  setMap
  hideMaps
  
-----------------------------------

ViewMachine is currently a blob of data and methods that provide services to the superset of "view systems".
  - Systems end up interacting with each other blindly through ViewMachine state
  - Presence or absence of systems isn't known by ViewMachine, but it still provides for them.
  - The services are NOT generic "view-ish" things, they're built in support of game-specific 

-----------------------------------
Semantically part of the UI:
  layers
  sprites
  sounds
-----------------------------------
General to 2D games:
- sprites / graphical items
  create / destroy
  add / remove from layers
  show / hide
  mutate
  animate

- sound effects / music 
  create
  add / remove
  loop / expire

- layers
  scale
  nest w other layers
  add/remove children
  show / hide
  move

- viewport
  track target
  move / animate
  


-----------------------------------
Game Systems are like Mappers
View Systems are like Reducers (??)

-----------------------------------

system.update
  IN:
    state (entities or ui objects)
    input events (time, controllers)
    config (sprite config, map defs etc)
  OUT:
    state (updated entities or ui objects)
    events (eg, KILLED or RESTART)
  
------------------------------------
ROOMS UPDATE
  map_physics_system2
  viewport_system2
  viewport_room_system

  Sync Rooms In View  (find roomIds)
  Room components -- add / remove
    view system that instantiates and positions "room sprites"
      tile sprite pools
      moving room sprites around

  Sync Area
    Relocate viewport to a new area
    Transition movement 


