// Generated by CoffeeScript 1.9.2
(function() {
  var Benchmark, Point, Point2, p1, suite;

  Point = (function() {
    function Point(x1, y1, eid1, cid1) {
      this.x = x1;
      this.y = y1;
      this.eid = eid1;
      this.cid = cid1;
      this.type = 5;
      null;
    }

    Point.prototype.clone = function() {
      return new this.constructor(this.x, this.y, this.eid, this.cid);
    };

    Point.prototype.replicate = function() {
      return this.constructor(this.x, this.y, null, null);
    };

    Point["default"] = function() {
      return this(0.0, 0.0, null, null);
    };

    return Point;

  })();

  Point2 = function(x, y, eid, cid) {
    return {
      type: 5,
      eid: 0,
      cid: 0,
      x: x,
      y: y,
      clone: Point2.clone,
      replicate: Point2.replicate,
      "default": function() {
        return Point2(0.0, 0.0, null, null);
      }
    };
  };

  Benchmark = require('benchmark');

  suite = new Benchmark.Suite;

  p1 = new Point(42, 42);

  suite.add("new Point()", function() {
    var x;
    x = new Point(100, 100);
    return null;
  });

  suite.add("Point.clone()", function() {
    var x;
    x = p1.clone();
    return null;
  });

  suite.add("Point.replicate()", function() {
    var x;
    x = p1.replicate();
    return null;
  });

  suite.add("Point.defaults()", function() {
    var x;
    x = p1.defaults();
    return null;
  });

  suite.add("Point2()", function() {
    var x;
    return x = Point2(100, 100);
  });

  suite.add("Point2.clone()", function() {
    var x;
    x = p2.clone();
    return null;
  });

  suite.add("Point2.replicate()", function() {
    var x;
    x = p2.replicate();
    return null;
  });

  suite.add("Point2.defaults()", function() {
    var x;
    x = p2.defaults();
    return null;
  });

  suite.on('complete', function() {
    console.log('Fastest is ' + this.filter('fastest').map('name'));
    return console.log(this);
  });

  suite.on('cycle', function(event) {
    return console.log(String(event.target));
  });

  suite.run({
    async: true
  });

}).call(this);
